node SetReset01(Set, Reset: bool)
returns (sOff, sOn: bool);
let
	sOff = true -> if pre sOff and Set then false
			else if (pre sOn and Reset) then true
			else pre sOff;
	sOn = false -> if pre sOn and Reset then false
			else if (pre sOff and Set) then true
			else pre sOn;
tel

node SetReset02(Set, Reset: bool)
returns (sOff, sOn: bool);
let
  automaton a
  state POINT:
  unless true restart OFF
  	let
	sOff = true;
	sOn = false; 
 	tel
		
  state OFF:
  unless Set resume ON
	let		
	sOff = true;
	sOn = false;
	tel	
	

   state ON:
   unless Reset resume OFF
	let		
	sOff = false;
	sOn = true;
	tel	
	


tel


node top0(Set, Reset: bool) returns (OK:bool);
var b,c,d,e:bool;
let
  (b,c) = SetReset01(Set, Reset);
  (d,e) = SetReset02(Set, Reset);
  OK = b = d and c=e;
  --%PROPERTY OK=true;
tel


node SetReset11(Set, Reset, init: bool)
returns (sOff, sOn: bool; switchon, switchoff, cnt: int);
	var sOff_1, sOff_2, sOn_1, sOn_2, lv5, lv6, lv7: bool;
		switchon_1, switchon_2, switchoff_1, switchoff_2,
		cnt_1, cnt_2: int;
let
	-- initial values
	sOff_1 = false -> pre sOff;
	sOn_1 = false -> pre sOn;
	switchon_1 = 0 -> pre switchon;
	switchoff_1 = 0 -> pre switchoff;
	cnt_1 = 0 -> pre cnt;
	-- link validity
	lv5 = if sOff_1 then Set else false;
	lv6 = if sOn_1 then Reset else false;
	lv7 = if init and not (sOff_1 or sOn_1) then true else false;
	-- state exits
	sOff_2 = if sOff_1 and lv5  then false else sOff_1;
	sOn_2 = if sOn_1 and lv6  then false else sOn_1;
	-- exit actions
	switchoff_2 = if not sOff and sOff_1 then 0 else switchoff_1;
	switchon_2 = if not sOn and sOn_1 then 0 else switchon_1;
	-- transition actions
	cnt_2 = if lv5 then cnt_1+1 else cnt_1;
	cnt = if lv6 then cnt_2+1 else cnt_2;
	-- state entries
	sOff = if not sOff_2 and (lv7 or lv6) then true else sOff_2;
	sOn = if not sOn_2 and lv5 then true else sOn_2;
	-- entry actions
	switchoff = if sOff and not sOff_1 then 1 else switchoff_2;
	switchon = if sOn and not sOn_1 then 1 else switchon_2;
tel.


node SetReset12(Set, Reset, init: bool)
returns (sOff, sOn: bool; switchon, switchoff,cnt: int);
var sOff_1, sOn_1: bool;
    switchon_1, switchoff_1,cnt_1: int;
let
  -- initial values
  sOff_1 = false -> pre sOff;
  sOn_1 = false -> pre sOn;
  switchon_1 = 0 -> pre switchon;
  switchoff_1 = 0 -> pre switchoff;
  cnt_1 = 0 -> pre cnt;
  automaton b

--Initial state
  state POINT2:
  unless init restart OFF_ENTRY
  	let
		sOff = false;
		sOn = false;
		switchon = 0;
		switchoff = 0;
		cnt = 0;
 	tel

--execute OFF entry action
  state OFF_ENTRY:
	let		
		sOff = true;
		sOn = sOn_1;
		switchon = switchon_1;
		switchoff = 1;
		cnt = cnt_1;
	tel	
  until true resume OFF_IDL

--execute OFF during action		
  state OFF_IDL:
  unless Set  resume OFF_EXIT_ON_ENTRY
	let		
		sOff = true;
		sOn = sOn_1;
		switchon = switchon_1;
		switchoff = 1;
		cnt = cnt_1;
	tel	
  
--execute OFF exit action and ON entry action
  state OFF_EXIT_ON_ENTRY:
	let		
		sOff = false;
		sOn = true;
		switchon = 1;
		switchoff = 0;
		cnt = cnt_1 + 1;
	tel	
  until true resume ON_IDL

--execute ON during action
   state ON_IDL:
   unless Reset  resume ON_EXIT_OFF_ENTRY
	let		
		sOff = false;
		sOn = true;
		switchon = 1;
		switchoff = 0;
		cnt = cnt_1;
	tel
		
--execute ON exit action and OFF entry action	
   state ON_EXIT_OFF_ENTRY:
   let		
		sOff = true;
		sOn = false;
		switchon = 0;
		switchoff = 1;
		cnt = cnt_1+ 1;
	tel	
  until true resume OFF_IDL

tel


node top (Set, Reset, init: bool) returns (OK:bool);
var b,c,d,e:bool; i11, i12, i21, i22, cnt1, cnt2 :int;
let
  (b,c, i11, i12, cnt1) = SetReset11(Set, Reset, init);
  (d,e, i21, i22, cnt2) = SetReset12(Set, Reset, init);
  OK = b = d and c=e and i11=i21 and i12=i22 and cnt1=cnt2;
  --%PROPERTY OK=true;
tel

